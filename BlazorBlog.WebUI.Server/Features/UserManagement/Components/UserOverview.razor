@page "/user-overview"

@inject ISender Sender
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Users Overview</PageTitle>

<h2 class="text-3xl font-extrabold px-4 py-4 my-4 text-gray-900 dark:text-gray-100 bg-gray-100 dark:bg-gray-800 rounded-lg">User Overview</h2>

@if (users is null)
{
    <span><em>Loading...</em></span>
}
else if (users.Count == 0)
{
    <span><em>No users found</em></span>
}
else
{
    <QuickGrid Items="users.AsQueryable()">
        <PropertyColumn Property="@(prop => prop.UserName)" Sortable="true" Title="User Name"></PropertyColumn>
        <PropertyColumn Property="@(prop => prop.Email)" Sortable="true" Title="Email"></PropertyColumn>
        <PropertyColumn Property="@(prop => prop.Roles)" Sortable="false" Title="Roles"></PropertyColumn>
        <TemplateColumn Title="Actions">
            <button class="manage-roles-button" @onclick="() => OpenModal(context.Id, context.UserName)">
                <svg class="h-4 w-4 text-white mr-1" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" />
                    <rect x="5" y="11" width="14" height="10" rx="2" />
                    <circle cx="12" cy="16" r="1" />
                    <path d="M8 11v-4a4 4 0 0 1 8 0v4" />
                </svg>
                <span>Manage Roles</span>
            </button>
        </TemplateColumn>
    </QuickGrid>
}

<UserRolesModal ShowModal="@showModal" ModalClosed="CloseModal"
                UserId="@selectedUserId" UserName="@selectedUserName" />

@code {
    private List<UserResponse> users = new();
    private bool showModal = false;
    private string selectedUserId = "";
    private string selectedUserName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var result = await Sender.Send(new GetUsersQuery());
            if (result.Success)
            {
                users = result.Value ?? new List<UserResponse>();
            }
            else
            {
                users = new List<UserResponse>();
                Console.WriteLine("Failed to load users.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            users = new List<UserResponse>();
        }
    }

    private void OpenModal(string userId, string userName)
    {
        selectedUserId = userId;
        selectedUserName = userName;
        showModal = true;
        Console.WriteLine($"OpenModal {selectedUserId} {selectedUserName}");
    }

    private async Task CloseModal()
    {
        showModal = false;
        await LoadUsers(); // Reload users to refresh the grid
        await InvokeAsync(StateHasChanged); // Ensure UI updates
    }
}
