<h3>UserRolesModal</h3>

@if (ShowModal)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="bg-white dark:bg-gray-900 max-w-lg w-auto p-6 rounded-lg shadow-lg">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
                Change Roles for @UserName
            </h2>

            <div class="mt-4">
                <QuickGrid Items="roles.AsQueryable()">
                    <PropertyColumn Property="@(role => role)" Title="Role"></PropertyColumn>
                    <TemplateColumn>
                        <button class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded inline-flex items-center" @onclick="()=>RemoveRole(context)">
                            <svg class="h-4 w-4 text-red-500" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" />
                                <line x1="18" y1="6" x2="6" y2="18" />
                                <line x1="6" y1="6" x2="18" y2="18" />
                            </svg>
                        </button>
                    </TemplateColumn>
                </QuickGrid>
            </div>

            <div class="mt-4">
                <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-100 dark:text-gray-800" placeholder="Add new role" @bind="newRole" />
                <button class="mt-2 px-4 py-2 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700 w-full sm:w-auto">Add Role</button>
            </div>

            <div class="flex justify-end mt-6">
                <button class="px-6 py-2 bg-gray-600 text-white rounded-md shadow hover:bg-gray-700" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool ShowModal { get; set; }
    [Parameter]
    public EventCallback<bool> ModalClosed { get; set; }
    [Parameter]
    public required string UserId { get; set; }
    [Parameter]
    public string? UserName { get; set; }

    private List<string> roles = [];
    private string newRole = "";

    protected override async Task OnInitializedAsync()
    {
      
        if (ShowModal)

        {
            roles = new List<string> { "Admin", "User" };
        }
    }

    private async Task AddRole()
    {
        if (!string.IsNullOrEmpty(newRole))
        {
            roles.Add(newRole);
            newRole = "";
        }
    }

    async Task RemoveRole(string role)
    {
        roles.Remove(role);
    }

    void CloseModal()
    {
        ShowModal = false;
        ModalClosed.InvokeAsync(ShowModal);
    }
}
