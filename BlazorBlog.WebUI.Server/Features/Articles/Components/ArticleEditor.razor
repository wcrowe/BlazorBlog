@page "/article-editor"
@page "/article-editor/{ArticleId:int}"

@inject ISender Sender
@inject NavigationManager NavigationManager
@* @inject ICurrentUserService CurrentUserService *@

@attribute [Authorize(Roles ="Admin,Writer")]

@if (IsEditMode && Article is not null)
{
    <PageTitle>Edit Article "@Article.Title" By "@Article.UserName"</PageTitle>
    <h2 class="text-3xl font-extrabold text-gray-900 dark:text-gray-100 my-6 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">Edit Article "@Article.Title" By  "@Article.UserName"</h2>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <PageTitle>Error</PageTitle>
    <span class="!text-red-500 dark:!text-red-400 text-sm">@_errorMessage</span>
}
else

{
    <PageTitle>Create New Article</PageTitle>
    <h2 class="text-3xl font-extrabold text-gray-900 dark:text-gray-100 my-6 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">Create New Article</h2>
}

<div class="space-y-6">
    @if (Article is not null)
    {
        <EditForm Model="Article" OnSubmit="HandleSubmit" FormName="ArticleEditorForm" class="space-y-6">
            <div class="relative">
                <label for="title" class="text-sm text-gray-700 dark:text-gray-300">Title</label>
                <InputText id="title" @bind-Value="Article.Title" class="w-full border border-gray-300 dark:border-gray-600 rounded-md p-3 focus:ring focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-100" />
            </div>
            <div class="relative">
                <label for="content" class="text-sm text-gray-700 dark:text-gray-300">Content</label>
                <InputTextArea id="content" @bind-Value="Article.Content" class="w-full border border-gray-300 dark:border-gray-600 rounded-md p-3 focus:ring focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-100" />
            </div>
            <div class="relative">
                <label for="datePublished" class="text-sm text-gray-700 dark:text-gray-300">Date Published</label>
                <InputDate id="datePublished" @bind-Value="Article.DatePublished" Type="InputDateType.DateTimeLocal" class="w-full border border-gray-300 dark:border-gray-600 rounded-md p-3 focus:ring focus:ring-blue-300 dark:bg-gray-800 dark:text-gray-100" />
            </div>
            <div class="flex items-center">
                <InputCheckbox id="isPublished" @bind-Value="Article.IsPublished" class="w-5 h-5 text-blue-600 bg-white border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 checked:bg-blue-600 checked:border-blue-600 dark:bg-gray-800 dark:border-gray-600 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-blue-600" />
                <label for="isPublished" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Is Published</label>
            </div>
            <button type="submit" class="w-42 px-4 py-2 border rounded-md border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">Submit</button>
        </EditForm>

        @if (IsEditMode)
        {
            <p>
                <form @onsubmit="DeleteArticle" @formname="DeleteArticleForm" method="post" class="space-y-6">
                    <button type="submit" class="w-42 px-4 py-2 border rounded-md border-gray-300 dark:border-gray-600 bg-red-500 dark:bg-red-500 text-white hover:bg-red-600 dark:hover:bg-red-600 transition-colors">Delete Article</button>
                    <AntiforgeryToken />
                </form>
            </p>
        }
    }
</div>

@code {
    private bool IsEditMode => ArticleId != null;
    private string _errorMessage = string.Empty;
    [SupplyParameterFromForm]
    ArticleModel? Article { get; set; }

    [Parameter]
    public int? ArticleId { get; set; }

    [CascadingParameter]
    public HttpContext Context { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {

        if (ArticleId is not null)
        {
          //  var articleId = ArticleId.HasValue.ToString().Trim();
            var result = await Sender.Send(new GetArticleByIdForEditingQuery { Id = ArticleId.Value });
            if (result.Success)
            {
                Article ??= ((ArticleResponse?)result).Adapt<ArticleModel>();
                Article.Id = (int)ArticleId;
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            Article ??= new();
        }

    }

    private async Task HandleSubmit()
    {
        if (IsEditMode)
        {
            var command = Article.Adapt<UpdateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                Article = result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            var command = Article.Adapt<CreateArticleCommand>();
            var result = await Sender.Send(command);

            if (result.Success)
            {
                NavigationManager.NavigateTo($"/article-editor/{result.Value.Id}");
            }
            else
            {
                SetErrorMessage(result.Error);
           }

        }
    }

    async Task DeleteArticle()
    {
        if (ArticleId is null)
        {
            return;
        }

        var command = new DeleteArticleCommand
            {
                Id = (int)ArticleId
            };

        var result = await Sender.Send(command);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            SetErrorMessage(result.Error);
        }
    }

    void SetErrorMessage(string? error)
    {
        _errorMessage = error ?? string.Empty;
    }
}

