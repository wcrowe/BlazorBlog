@page "/article-overview"
@* @rendermode InteractiveWebAssembly *@
@rendermode InteractiveAuto 
@* @rendermode @(new InteractiveWebAssemblyRenderMode(true)) *@
@* @rendermode @(new InteractiveAutoRenderMode(false)) *@

@* @inject HttpClient Http *@
@inject NavigationManager Navigation
@inject IArticleOverviewService ArticleOverviewService

<PageTitle>Article Overview</PageTitle>

<h2 class="text-3xl font-extrabold px-4 py-4 my-4 text-gray-900 dark:text-gray-100 bg-gray-100 dark:bg-gray-800 rounded-lg">Articles</h2>



@if (articles is null)
{
    <p><em>Loading...</em></p>
}
else if (articles.Count == 0)
{
    <p><em>No articles found.</em></p>
}
else
{
    <QuickGrid Items="articles.AsQueryable()" RowContext="article">
        <PropertyColumn Property="@(a => a.Title)" Sortable="true" Title="Title"></PropertyColumn>
        <TemplateColumn Title="Published">
            @if (context.IsPublished)
            {
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M5 12l5 5l10 -10" />
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <line x1="18" y1="6" x2="6" y2="18" />
                    <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
            }
        </TemplateColumn>
        <PropertyColumn Property="@(a => a.IsPublished)" Sortable="true" Title="Published"></PropertyColumn>
        <PropertyColumn Property="@(a => a.DatePublished)" Sortable="true" Title="Date Published"></PropertyColumn>
        <TemplateColumn Title="Edit">
            <button class="edit-article-button" @onclick="() => EditArticle(context.Id)">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 0 0 -4 -4l-10.5 10.5v4" />
                    <path d="M13.5 6.5l4 4" />
                </svg>
                Edit
            </button>
        </TemplateColumn>
        <TemplateColumn Title="Toggle">
            <button class="edit-article-button" @onclick="() => ToggleArticlePublishes(context.Id)">
                <svg width="40" height="20" viewBox="0 0 40 20" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0" y="0" width="40" height="20" rx="10" fill="@(context.IsPublished ? "#6b7280" : "#ccc")" class="toggle-track" />
                    <circle cx="@(context.IsPublished ? 30 : 10)" cy="10" r="8" fill="white" class="toggle-thumb" />
                </svg>
                Toggle
            </button>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private List<ArticleResponse>? articles;

    private bool _initialized = false; // ✅ Prevents duplicate calls

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true; // ✅ Ensures data loads only once
            await LoadArticles();
            StateHasChanged(); // ✅ Forces UI refresh
        }
    }

    private async Task LoadArticles()
    {
        try
        {
            articles = await ArticleOverviewService.GetArticlesByCurrentUserAsync();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
            articles = new();
        }
    }

    async Task ToggleArticlePublishes(int id)
    {
        var updateArticle = await ArticleOverviewService.TogglePublishArticleAsync(id);
        if (updateArticle is not null && articles is not null)
        {

            var index = articles.FindIndex(a => a.Id == id);
            if (index != -1)
            {
                articles[index] = updateArticle ?? throw new InvalidOperationException("Article not found");
            }
            await InvokeAsync(StateHasChanged);
        }
 

    }

    void EditArticle(int id)
    {
        Navigation.NavigateTo($"article-editor/{id}");
        // Implement the logic to edit the article
    }
}
